# Spicy Golf

Every time you choose to apply a rule(s), explicitly state the rule(s) in the output. You can abbreviate the rule description to a single word or phrase.

## Project Context

- This is a monorepo of packages for Spicy Golf, a golf app that tracks games played with complex rules, points, and calculations.
- The app calls the api package sparingly, and only for data that it can't get or doesn't have locally.  This allows almost all of the app's functionality to work when the device is offline.  To achieve this, we use Jazz Tools, a local-first database with sync capabilities.
- Use the documentation of Jazz Tools if you have access locally to its `llms.txt` file.  If not, use documentation here: https://jazz.tools/llms-full.txt


## Tech Stack

- React Native
- TypeScript
- Jazz Tools
- TypeScript package manager is `bun` 1.2 or higher
- Don't ask to run tests. They have to be run in a React Native app.

## Rules

- Attempt to reduce the amount of code rather than add more.
- Prefer iteration and modularization over code duplication.
- Do not add comments unless explicitly told to do so, or the code is sufficiently complex that it requires comments.

## TypeScript Best Practices

- Use TypeScript for all code; prefer interfaces over types.
- Use lowercase with dashes for directories (e.g., `components/auth-wizard`).
- Use named exports for components & functions, not default exports.
- Avoid `any` and enums; use explicit types and maps instead.
- Use functional components with TypeScript interfaces.
- Enable strict mode in TypeScript for better type safety.
- Suggest the optimal implementation considering:
  - Performance impact
  - Maintenance overhead
  - Testing strategy
- Code examples should follow TypeScript best practices.

## React and React Native Best Practices

- Minimize the use of `useEffect`. They should be a last resort.
- Use named functions for `useEffect`s with a meaningful function name. Avoid adding unnecessary comments on effect behavior.
- Favor small components over large components.  Break functionality up into multiple components/files to avoid complex re-rendering issues.

## Syntax & Formatting

- Use the `function` keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.
- Use Biome for consistent code formatting and linting.
